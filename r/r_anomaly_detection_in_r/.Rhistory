#' Summarise prediction error of model
#'
#' This function uses absolute difference and mean absolute percentage error
#' for summarising prediction errors
#'
#' @param .cbar \code{cbar} object
#' @param .session names of sessions, which is NULL by default
#' @importFrom dplyr filter
#' @return \code{data.frame} with prediction errors
#' @export
summarise_pred_error <- function(.cbar,
.session = "measurement") {
stopifnot(inherits(.cbar, "cbar"))
target_data <- dplyr::filter(.cbar$pred, session == .session)
error <- abs(target_data$point_pred - target_data$y)
data.frame(datetime = target_data$datetime,
session = .session,
diff = error,
mape = error / abs(target_data$y))
}
#' Summarise anomaly detection result
#'
#' @param .cbar \code{cbar} object
#' @param .session names of sessions, which is NULL by default
#' @importFrom dplyr filter
#' @return \code{data.frame} that summarises input data with anomaly label
#' @export
summarise_anomaly <- function(.cbar,
.session = NULL) {
stopifnot(inherits(.cbar, "cbar"))
if (is.null(.session)) {
.session <- as.character(unique(.cbar$pred$session))
}
ret <- data.frame(datetime = as.character(),
session = as.character(),
y = as.numeric(),
point_pred = as.numeric(),
lower_bound = as.numeric(),
upper_bound = as.numeric(),
anomaly = as.logical())
for (.session_name in .session) {
target_data <- dplyr::filter(.cbar$pred, session == .session_name)
anomaly <- as.logical((target_data$y > target_data$upper_bound) +
(target_data$y < target_data$lower_bound))
res <- cbind(target_data, anomaly = anomaly)
ret <- rbind(ret, res)
}
ret
}
#' Summarise anomaly in session
#'
#' @param .cbar \code{cbar} object
#' @param .session names of sessions, which is NULL by default
#' @importFrom dplyr filter
#' @return \code{data.frame} that summarises outcome for each sessoin
#' @export
summarise_session <- function(.cbar,
.session = NULL) {
stopifnot(inherits(.cbar, "cbar"))
if (is.null(.session)) {
.session <- as.character(unique(.cbar$pred$session))
}
ret <- data.frame(session = as.character(),
n_anomaly = as.numeric(),
n_total = as.numeric(),
rate = as.numeric())
for (.session_name in .session) {
target_data <- summarise_anomaly(.cbar, .session_name)
target_data <- dplyr::filter(target_data, session == .session_name)
n_anomaly <- sum(target_data$anomaly)
n_total <- nrow(target_data)
res <- data.frame(session = .session_name,
n_anomaly = n_anomaly,
n_total = n_total,
rate = n_anomaly / n_total)
ret <- rbind(ret, res)
}
ret
}
# analytical abstraction
coef_samples <- function(.cbar) {
stopifnot(inherits(.cbar, "cbar"))
coef_mat <- .cbar$model$coefficients
col_names <- colnames(coef_mat)
coefs <- list()
for (i in 1:ncol(coef_mat)) {
coefs[[col_names[i]]] <- coef_mat[, i]
}
coefs
}
#' @importFrom stats median
coef_estimate <- function(.cbar) {
stopifnot(inherits(.cbar, "cbar"))
.vars <- coef_samples(.cbar)
coefs <- c()
for (var_name in names(.vars)) {
val <- median(.vars[[var_name]])
coefs <- c(coefs, val)
}
names(coefs) <- names(.vars)
coefs
}
#' Summarise inclusion probability of model
#'
#' @param .cbar \code{cbar} object
#' @param threshold threshold of inclusion probability, which is .1 by default
#' @return \code{vector} that summarises inclusion probabilities for each MCMC
#'   samples
#' @export
summarise_incprob <- function(.cbar, threshold = .1) {
stopifnot(inherits(.cbar, "cbar"))
coefs <- coef_estimate(.cbar)
coefs <- abs(coefs)
coefs <- coefs / max(coefs)
coefs[coefs > threshold]
}
#'
#' @param target_data data frame
#' @param x_label a label for x-axis
#' @param y_label a label for y-ayis
#' @param seq_by increment of the sequence, which is NULL by default
#' @return \code{ggplot} object
#' @importFrom magrittr %>%
#' @importFrom ggplot2 ggplot aes geom_ribbon geom_line geom_vline xlab ylab
#'             scale_x_continuous theme element_text
#' @export
plot_ts_ <- function(target_data, x_label = "", y_label = "", seq_by = NULL) {
time_label <- as.character(target_data[, "datetime"])
target_data[, "datetime"] <- 1:nrow(target_data)
# TODO: Use S3 class function
if (is.null(seq_by)) {
n_row <- nrow(target_data)
seq_by <- ifelse(n_row > 50,
round(n_row / 50), 1)
}
brks <- seq(1, n_row, seq_by)
time_label <- time_label[brks]
xintercept <- dplyr::filter(target_data, session == "measurement") %>%
.[1, "datetime"] - 1
ggplot(target_data, aes(x = datetime)) +
geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound),
fill = "PaleVioletRed") +
geom_line(aes(y = y),
colour = "black", size = .8, linetype = "solid") +
geom_line(aes(y = point_pred),
colour = "DarkRed", size = .8, linetype = "dashed") +
geom_vline(xintercept = xintercept,
colour = "black", size = 1, linetype = "solid") +
xlab(x_label) + ylab(y_label) +
scale_x_continuous(labels = time_label,
breaks = brks) +
theme(axis.text.x = element_text(angle = 50, hjust = 1,
vjust = 1, size = 12))
}
#' Print time-series plot
#'
#' @param .cbar cbar object
#' @param x_label a label for x-axis
#' @param y_label a label for y-ayis
#' @param seq_by increment of the sequence, which is NULL by default
#' @return \code{ggplot} object
#' @export
plot_ts <- function(.cbar, x_label = "", y_label = "", seq_by = NULL) {
stopifnot(inherits(.cbar, "cbar"))
target_data <- .cbar$pred
plot_ts_(target_data, x_label, y_label, seq_by)
}
#' Print estimation error plot
#'
#' @param .error error data frame
#' @param xlab a label for x-axis
#' @param ylab a label for y-ayis
#' @param method diff
#' @param ... params for boxplot
#' @importFrom graphics boxplot
#' @export
plot_error_ <- function(.error,
xlab = "",
ylab = "Estimation error",
method = "diff",
...) {
boxplot(.error[, method],
xlab = xlab, ylab = ylab, ...)
}
#' Print estimation error plot
#'
#' @param .cbar cbar object
#' @param xlab a label for x-axis
#' @param ylab a label for y-ayis
#' @param method diff
#' @param ... params for boxplot
#' @return \code{boxplot} object
#' @export
plot_error <- function(.cbar,
xlab = "",
ylab = "Estimation error",
method = "diff",
...) {
.error <- summarise_pred_error(.cbar)
plot_error_(.error[, method], xlab, ylab, method, ...)
}
#' @param .incprob data frame
#' @param threshold a threhold for inclusion probablity
#' @param horiz horiz
#' @param cex.names cex.names
#' @param xlab xlab
#' @param las las
#' @param ... params for barplot
#' @return \code{boxplot} object
#' @importFrom graphics barplot
#' @export
plot_incprob_ <- function(.incprob,
threshold = .1,
horiz = T,
cex.names = .5,
xlab = "Inclusion probability (%)",
las = 1,
...) {
barplot(sort(.incprob) * 100,
horiz = horiz, cex.names = cex.names,
xlab = xlab, las = las, ...)
}
#'
#' @param .cbar cbar object
#' @param threshold a threhold for inclusion probablity
#' @param horiz horiz
#' @param cex.names cex.names
#' @param xlab xlab
#' @param las las
#' @param ... params for barplot
#' @return \code{boxplot} object
#' @export
plot_incprob <- function(.cbar,
threshold = .1,
horiz = T,
cex.names = .5,
xlab = "Inclusion probability (%)",
las = 1,
...) {
.incprob <- summarise_incprob(.cbar, threshold)
plot_incprob_(.incprob, threshold, horiz, cex.names, xlab, las, ...)
}
# reserved: Variable selection (compare)
plot_incprob_comp <- function(.cbar) {
}
getwd()
# Loading Dataset
df = read.table("TrainData.txt", header = TRUE, sep = ",")
install.packages("depmixS4")
install.packages(c("DMwR", "outliers"))
install.packages(c("anomalize", "tibbletime", "tidyquant"))
install.packages(c("Boom", "bsts"))
install.packages("astsa")
