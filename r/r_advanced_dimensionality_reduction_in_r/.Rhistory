load("mnist-sample-200.Rdata")
library(randomForest)
load("creditcard.Rdata")
# Look at the data dimensions
dim(creditcard)
# Explore the column names
names(creditcard)
# Observe some records
str(creditcard)
# Generate a summary
summary(creditcard)
# Plot a histogram of the transaction time
ggplot(creditcard, aes(x = Time)) +
geom_histogram()
# Extract positive and negative instances of fraud
creditcard_pos <- creditcard[Class == 1]
creditcard
# Extract positive and negative instances of fraud
creditcard_pos <- creditcard["Class" == 1]
creditcard_neg <- creditcard["Class" == 0]
# Fix the seed
set.seed(1234)
# Separate the features and label
train_x <- creditcard[, -31]
train_x
# Separate the features and label
train_x <- creditcard[, c(-1,30,-31)]
# Separate the features and label
train_x <- creditcard[, c(-1,-30,-31)]
load("creditcard.Rdata")
# Look at the data dimensions
dim(creditcard)
# Explore the column names
names(creditcard)
# Observe some records
str(creditcard)
# Generate a summary
summary(creditcard)
# Plot a histogram of the transaction time
ggplot(creditcard, aes(x = Time)) +
geom_histogram()
# Fix the seed
set.seed(1234)
# Separate the features and label
train_x <- creditcard[, c(-1,-30,-31)]
train_x
train_y <- as.numeric(creditcard$Class)
library(randomForest)
# Train a random forests
rf_model <- randomForest(x = train_x, y = train_y, ntree = 10)
train_y
train_y <- factor(as.numeric(creditcard$Class))
train_y
# Train a random forests
rf_model <- randomForest(x = train_x, y = train_y, ntree = 10)
# Plot the error evolution and variable importance
plot(rf_model)
# Train a random forests
rf_model <- randomForest(x = train_x, y = train_y, ntree = 10)
# Train a random forests
rf_model <- randomForest(x = train_x, y = train_y, ntree = 100)
# Plot the error evolution and variable importance
plot(rf_model)
varImpPlot(rf_model)
# Generate the t-SNE embedding
tsne_output <- Rtsne(as.matrix(creditcard_train[, -31]), check_duplicates = FALSE, PCA = FALSE)
library(Rtsne)
# Generate the t-SNE embedding
tsne_output <- Rtsne(as.matrix(creditcard_train[, -31]), check_duplicates = FALSE, PCA = FALSE)
# Generate the t-SNE embedding
tsne_output <- Rtsne(as.matrix(creditcard_train[, c(-1,-30,-31)]), check_duplicates = FALSE, PCA = FALSE)
# Generate the t-SNE embedding
tsne_output <- Rtsne(as.matrix(creditcard[, c(-1,-30,-31)]), check_duplicates = FALSE, PCA = FALSE)
tsne_output
# Generate a data frame to plot the result
tsne_plot <- data.frame(tsne_x = tsne_output$Y[,1],
tsne_y = tsne_output$Y[,2],
Class = creditcard_train$Class)
# Generate a data frame to plot the result
tsne_plot <- data.frame(tsne_x = tsne_output$Y[,1],
tsne_y = tsne_output$Y[,2],
Class = as.numeric(creditcard$Class))
# Plot the embedding usign ggplot and the label
ggplot(tsne_plot, aes(x = tsne_x, y = tsne_y, color = Class)) +
ggtitle("t-SNE of credit card fraud train set") +
geom_text(aes(label = Class)) + theme(legend.position = "none")
library(tidyverse)
# Generate the t-SNE embedding
tsne_output <- Rtsne(as.matrix(creditcard[, c(-1,-30,-31)]), check_duplicates = FALSE, PCA = FALSE)
# Generate a data frame to plot the result
tsne_plot <- data.frame(tsne_x = tsne_output$Y[,1],
tsne_y = tsne_output$Y[,2],
Class = as.numeric(creditcard$Class))
# Plot the embedding usign ggplot and the label
ggplot(tsne_plot, aes(x = tsne_x, y = tsne_y, color = Class)) +
ggtitle("t-SNE of credit card fraud train set") +
geom_text(aes(label = Class)) + theme(legend.position = "none")
# Fix the seed
set.seed(1234)
# Train a random forest
rf_model_tsne <- randomForest(x = train_tsne_x, y = train_tsne_y, ntree = 100)
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_x, y = tsne_y, ntree = 100)
library(randomForest)
# Plot the error evolution and variable importance
plot(rf_model)
varImpPlot(rf_model)
# Set the seed
set.seed(1234)
library(Rtsne)
library(tidyverse)
# Generate the t-SNE embedding
tsne_output <- Rtsne(as.matrix(creditcard[, c(-1,-30,-31)]), check_duplicates = FALSE, PCA = FALSE)
# Generate a data frame to plot the result
tsne_plot <- data.frame(tsne_x = tsne_output$Y[,1],
tsne_y = tsne_output$Y[,2],
Class = as.numeric(creditcard$Class))
# Plot the embedding usign ggplot and the label
ggplot(tsne_plot, aes(x = tsne_x, y = tsne_y, color = Class)) +
ggtitle("t-SNE of credit card fraud train set") +
geom_text(aes(label = Class)) + theme(legend.position = "none")
# Fix the seed
set.seed(1234)
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_output$Y[,1], y = tsne_output$Y[,2], ntree = 100)
tsne_output$Y[,1]
tsne_output$Y[,2]
tsne_output$Y[,1]
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_output$Y[,1], y = tsne_output$Y[,2], ntree = 100)
as.vector(tsne_output$Y[,1])
# Train a random forest
rf_model_tsne <- randomForest(x = as.vector(tsne_output$Y[,1]), as.vector(tsne_output$Y[,2]), ntree = 100)
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_output$Y[,1], y = tsne_output$Y[,2], ntree = 100)
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_output$Y[,1], y = tsne_output$Y[,2], ntree = 100)
# Plot the error evolution
plot(rf_model_tsne)
# Plot the variable importance
varImpPlot(rf_model_tsne)
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_output$Y[,1], y = tsne_output$Y[,2], ntree = 100)
tsne_output$Y[,1]
tsne_output$Y[,2]
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_output$Y[,2], y = tsne_output$Y[,1], ntree = 100)
tsne_output$
sa
tsne_output
tsne_output$Y
as.numeric(creditcard$Class)
# Train a random forest
rf_model_tsne <- randomForest(x = as.numeric(creditcard$Class), y = tsne_output$Y, ntree = 100)
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_output$Y, y = as.numeric(creditcard$Class), ntree = 100)
# Train a random forest
rf_model_tsne <- randomForest(x = tsne_output$Y, y = factor(as.numeric(creditcard$Class)), ntree = 100)
# Plot the error evolution
plot(rf_model_tsne)
# Plot the variable importance
varImpPlot(rf_model_tsne)
creditcard
# Predict on the test set using the random forest
pred_rf <- predict(rf_model, creditcard, type = "prob")
# Plot a probability distibution of the target class
hist(pred_rf[,2])
# Compute the area under the curve
pred <- prediction(pred_rf[,2], creditcard_test$Class)
pred_rf
# Compute the area under the curve
pred <- prediction(pred_rf[,2], creditcard$Class)
creditcard$Class
as.numeric(creditcard$Class)
# Compute the area under the curve
pred <- prediction(pred_rf[,2], as.numeric(creditcard$Class))
pred_rf[,2]
# Compute the area under the curve
pred <- prediction(pred_rf2], as.numeric(creditcard$Class))
# Compute the area under the curve
pred <- prediction(pred_rf[,2], as.numeric(creditcard$Class))
library(ROCR)
# Compute the area under the curve
pred <- prediction(pred_rf[,2], as.numeric(creditcard$Class))
perf <- performance(pred, measure = "auc")
perf@y.values
# Compute the area under the curve
pred <- prediction(pred_rf[,2], creditcard_test$Class)
# Compute the area under the curve
pred <- prediction(pred_rf[,2], creditcard$Class)
perf <- performance(pred, measure = "auc")
perf@y.values
load("fashion_mnist_500.Rdata")
