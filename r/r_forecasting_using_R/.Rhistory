autolayer(holt(austa,h=20,damped = TRUE), series ="Damped Holts method",PI=FALSE) +
ggtitle("International visitors to AU forecasts") +
xlab("Year") +
ylab("Visitors in million") +
guides(colour=guide_legend(title="Forecast"))
tail(a10,10)
tail(a10,20)
summary(a10)
frequency(a10)
tail(a10,20)
frequency(a10)
# Plot the data
autoplot(a10)
# Produce 3 year forecasts
fc <- hw(a10, seasonal = "multiplicative", h = 12*3)
# Check if residuals look like white noise
checkresiduals(fc)
whitenoise <- FALSE
# Plot forecasts
autoplot(fc)
tail(hyndsight,10)
tail(hyndsight,100)
tail(hyndsight,1000)
head(hyndsight,10)
# Fit ETS model to austa in fitaus
fitaus <- ets(austa)
# Fit ETS model to austa in fitaus
fitaus <- ets(austa)
checkresiduals(fitaus)
# Plot forecasts
autoplot(forecast(fitaus))
summary(fitaus)
# Repeat for hyndsight data in fiths
fiths <- ets(hyndsight)
summary(fiths)
cement
frequency(cement)
cement
cement
frequency(cement)
# Function to return ETS forecasts
fets <- function(y, h) {
forecast(ets(y), h = h)
}
# Apply tsCV() for both methods
e1 <- tsCV(cement, forecastfunction = fets, h = 4)
fpp2::cement
detach("package:fma", unload=TRUE)
cement
base::fitted(fit)
fitted(fit)
fitted(fc)
base::fitted(fc)
stats::fitted(fc)
help(accuracy())
help("accuracy")
help("fcholt")
help("holt")
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(fpp2)
library(here)
autoplot(usmelec)
autoplot(usmelec) + xlab("Year") + ylab("US Monthly net electricity generation")
autoplot(cbind(usmelac^2))
autoplot(cbind(usmelec^2))
autoplot(cbind(usmelec^0.5,usmelec^0.333))
autoplot(cbind(usmelec^0.5,usmelec^0.333), facets = series)
autoplot(type=rbind(usmelec^0.5,usmelec^0.333))
autoplot(rbind(usmelec^0.5,usmelec^0.333))
autoplot(cbind(usmelec^0.5,usmelec^0.333))
autoplot(rbind(usmelec^0.5,usmelec^0.333))
autoplot(cbind(usmelec^0.5,usmelec^0.333))
usmelec
autoplot(cbind(usmelec^0.5,usmelec^0.333))
autoplot(cbind(usmelec^0.5,usmelec^0.333), facets = TRUE)
autoplot(cbind(usmelec^0.5
,usmelec^0.333
,log(usmelec)
,-1/usmelec), facets = TRUE)
autoplot(cbind(usmelec^0.5
,usmelec^0.333
,log(usmelec)
,-1/usmelec))
,-1/usmelec)) +
autoplot(cbind(usmelec^0.5
,usmelec^0.333
,log(usmelec)
,-1/usmelec)) +
facet_wrap()
,-1/usmelec)) +
,-1/usmelec)) +
autoplot(col=cbind(usmelec^0.5
,usmelec^0.333
,log(usmelec)
,-1/usmelec)) +
facet_grid(.~)
autoplot(col=cbind(usmelec^0.5
,usmelec^0.333
,log(usmelec)
,-1/usmelec))
autoplot(cbind(col=usmelec^0.5
,usmelec^0.333
,log(usmelec)
,-1/usmelec))
autoplot(cbind(col=usmelec^0.5
,col=usmelec^0.333
,col=log(usmelec)
,col=-1/usmelec))
autoplot(cbind(col=usmelec^0.5
,usmelec^0.333
,log(usmelec)
,-1/usmelec))
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec))
x<-autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec))
x$data
,inverse=-1/usmelec)) +
,inverse=-1/usmelec)) +
,inverse=-1/usmelec)) +
x<-autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec))
x$data
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec))
,inverse=-1/usmelec)) + facet_grid(.~ series)
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec))
,inverse=-1/usmelec)) + facet_wrap(~series)
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_wrap(~series)
,inverse=-1/usmelec)) + facet_wrap(~series,scales = "free")
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_wrap(~series,scales = "free")
,inverse=-1/usmelec)) + facet_grid(~series,scales = "free")
,inverse=-1/usmelec)) + facet_grid(.~series,scales = "free")
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(.~series,scales = "free")
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
,inverse=-1/usmelec)) + facet_grid(.~series,scales = "free")
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(.~series,scales = "free")
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
autoplot(cbind(sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_wrap(~series,scales = "free")
autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_wrap(~series,scales = "free")
,inverse=-1/usmelec)) + facet_grid(.~series,scales = "free")
autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(.~series,scales = "free")
autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(series.~,scales = "free")
autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
library(grid)
gt = ggplot_gtable(ggplot_build(g))
g=autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
library(grid)
gt = ggplot_gtable(ggplot_build(g))
gt$widths[4] = 4*gt$widths[4]
grid.draw(gt)
autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
grid.draw(g)
ggplot_gtable(ggplot_build(g))
grid.draw(ggplot_gtable(ggplot_build(g)))
autoplot(c) + xlab("Year") + ylab("US Monthly net electricity generation")
autoplot(c) + xlab("Year") + ylab("US Monthly net electricity generation")
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(fpp2)
library(here)
autoplot(c) + xlab("Year") + ylab("US Monthly net electricity generation")
autoplot(usmelec) + xlab("Year") + ylab("US Monthly net electricity generation")
autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
#grid.draw(ggplot_gtable(ggplot_build(g)))
# library(grid)
# gt = ggplot_gtable(ggplot_build(g))
# gt$widths[4] = 4*gt$widths[4]
# grid.draw(g)
grid.draw(ggplot_gtable(ggplot_build(g)))
library(grid)
grid.draw(ggplot_gtable(ggplot_build(g)))
g<-autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) + facet_grid(series~.,scales = "free")
library(grid)
grid.draw(ggplot_gtable(ggplot_build(g)))
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(fpp2)
library(here)
library(grid)
gt = ggplot_gtable(ggplot_build(g))
library(grid)
gt = ggplot_gtable(ggplot_build(g))
library(forecast)
library(fpp2)
library(here)
autoplot(usmelec) + xlab("Year") + ylab("US Monthly net electricity generation")
g<-autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) +
facet_grid(series~.,scales = "free_y")
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
gt$heights[7] = 8*gt$heights[4]
gt$heights[7] = 8*gt$heights[4]
grid.draw(gt)
gt$heights[7] = 2*gt$heights[7]
grid.draw(gt)
gt$heights[7] = 10*gt$heights[7]
grid.draw(gt)
gtable_show_layout(gt)
g<-autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) +
facet_grid(series~.,scales = "free_y")
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
autoplot(usmelec) + xlab("Year") + ylab("US Monthly net electricity generation")
g<-autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) +
facet_wrap(series~.,scales = "free_y")
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
gt$widths[5] = 2*gt$widths[5]
grid.draw(gt)
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
g<-autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) +
facet_wrap(series~.,scales = "free_y")
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
gt$widths[5] = 2*gt$widths[5]
gt$widths[9] = 2*gt$widths[9]
gt$widths[13] = 2*gt$widths[13]
grid.draw(gt)
gt$heights
vignette("extending-ggplot2")
library(here)
autoplot(usmelec) + xlab("Year") + ylab("US Monthly net electricity generation")
g<-autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) +
facet_wrap(series~.,scales = "free_y")
g
,inverse=-1/usmelec)) +
facet_grid(series~.,scales = "free_y")
g
autoplot(usmelec) + xlab("Year") + ylab("US Monthly net electricity generation")
g<-autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) +
facet_grid(series~.,scales = "free_y")
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
gt$heights
# gt$heights[7] = 2*gt$heights[7]
# gt$heights[9] = 2*gt$heights[9]
# gt$heights[11] = 2*gt$heights[11]
# gt$heights[13] = 2*gt$heights[13]
gt$heights[15] = 2
# gt$heights[7] = 2*gt$heights[7]
# gt$heights[9] = 2*gt$heights[9]
# gt$heights[11] = 2*gt$heights[11]
# gt$heights[13] = 2*gt$heights[13]
gt$heights[15] = unit(5,units = "cms")
# gt$heights[7] = 2*gt$heights[7]
# gt$heights[9] = 2*gt$heights[9]
# gt$heights[11] = 2*gt$heights[11]
# gt$heights[13] = 2*gt$heights[13]
gt$heights[15] = unit(5,units = "cm")
grid.draw(gt)
# gt$heights[7] = 2*gt$heights[7]
# gt$heights[9] = 2*gt$heights[9]
# gt$heights[11] = 2*gt$heights[11]
# gt$heights[13] = 2*gt$heights[13]
gt$heights[15] = unit(15,units = "cm")
grid.draw(gt)
# gt$heights[7] = 2*gt$heights[7]
# gt$heights[9] = 2*gt$heights[9]
# gt$heights[11] = 2*gt$heights[11]
# gt$heights[13] = 2*gt$heights[13]
gt$heights[15] = unit(10,units = "cm")
grid.draw(gt)
,inverse=-1/usmelec)) +
facet_wrap(series~.,scales = "free_y")
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
,inverse=-1/usmelec)) +
facet_wrap(series~,scales = "free_y")
g
,inverse=-1/usmelec)) +
facet_wrap(~series,scales = "free_y")
g<-autoplot(cbind(original = usmelec
,sq_rt=usmelec^0.5
,cube_rt=usmelec^0.333
,log=log(usmelec)
,inverse=-1/usmelec)) +
facet_wrap(~series,scales = "free_y")
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
gt$heights[8] = unit(10,units = "cm")
gt$heights[13] = unit(20,units = "cm")
grid.draw(gt)
g
library(grid)
gt = ggplot_gtable(ggplot_build(g))
#gt$widths[4] = 4*gt$widths[4]
library(gtable)
gtable_show_layout(gt)
a <- gtable(unit(1:3, c("cm")), unit(5, "cm"))
a
gtable_show_layout(a)
autoplot(sq_rt=usmelec^0.5)
autoplot(usmelec^0.5)
BoxCox.lambda(usmelec)
here("images","stationarity_chp4.jpeg")
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(fpp2)
library(here)
head(elec)
head(elecdaily)
head(elecdaily)
elec <- elecdaily
elec <- elecdaily
head(elec)
# Time plots of demand and temperatures
autoplot(elecdaily[, c("Demand", "Temperature")], facets = TRUE)
# Matrix of regressors
#Index elec accordingly to set up the matrix of regressors to include MaxTemp for the maximum temperatures, MaxTempSq which represents the squared value of the maximum temperature, and Workday, in that order.
xreg <- cbind(MaxTemp = elec[, "Temperature"], MaxTempSq = elec[,"Temperature"]^2,Workday = elec[,"Workday"])
#elec <- elecdaily
head(elec)
# Time plots of demand and temperatures
autoplot(elecdaily[, c("Demand", "Temperature")], facets = TRUE)
# Matrix of regressors
#Index elec accordingly to set up the matrix of regressors to include MaxTemp for the maximum temperatures, MaxTempSq which represents the squared value of the maximum temperature, and Workday, in that order.
xreg <- cbind(MaxTemp = elec[, "Temperature"], MaxTempSq = elec[,"Temperature"]^2,Workday = elec[,"Workday"])
#elec <- elecdaily
head(elec)
# Time plots of demand and temperatures
autoplot(elecdaily[, c("Demand", "Temperature")], facets = TRUE)
# Matrix of regressors
#Index elec accordingly to set up the matrix of regressors to include MaxTemp for the maximum temperatures, MaxTempSq which represents the squared value of the maximum temperature, and Workday, in that order.
xreg <- cbind(MaxTemp = elecdaily[, "Temperature"], MaxTempSq = elec[,"Temperature"]^2,Workday = elec[,"Workday"])
#elec <- elecdaily
head(elec)
# Time plots of demand and temperatures
autoplot(elecdaily[, c("Demand", "Temperature")], facets = TRUE)
# Matrix of regressors
#Index elec accordingly to set up the matrix of regressors to include MaxTemp for the maximum temperatures, MaxTempSq which represents the squared value of the maximum temperature, and Workday, in that order.
xreg <- cbind(MaxTemp = elecdaily[, "Temperature"], MaxTempSq = elecdaily[,"Temperature"]^2,Workday = elecdaily[,"Workday"])
head(elecdaily)
#elec <- elecdaily
head(elec)
# Time plots of demand and temperatures
autoplot(elecdaily[, c("Demand", "Temperature")], facets = TRUE)
# Matrix of regressors
#Index elec accordingly to set up the matrix of regressors to include MaxTemp for the maximum temperatures, MaxTempSq which represents the squared value of the maximum temperature, and Workday, in that order.
xreg <- cbind(MaxTemp = elecdaily[, "Temperature"]
,MaxTempSq = elecdaily[,"Temperature"]^2
,Workday = elecdaily[,"Workday"])
#elec <- elecdaily
head(elec)
# Time plots of demand and temperatures
autoplot(elecdaily[, c("Demand", "Temperature")], facets = TRUE)
# Matrix of regressors
#Index elec accordingly to set up the matrix of regressors to include MaxTemp for the maximum temperatures, MaxTempSq which represents the squared value of the maximum temperature, and Workday, in that order.
xreg <- cbind(MaxTemp = elecdaily[, "Temperature"]
,MaxTempSq = elecdaily[,"Temperature"]^2)
#,Workday = elecdaily[,"Workday"])
# Fit model
fit <- auto.arima(elec[,"Demand"], xreg = xreg)
# Forecast fit one day ahead
#If the next day is a working day (indicator is 1) with maximum temperature forecast to be 20°C, what is the forecast demand? Fill out the appropriate values in cbind() for the xreg argument in forecast().
forecast(fit, xreg = cbind(20, 20^2, 1))
#elec <- elecdaily
head(elec)
# Time plots of demand and temperatures
autoplot(elecdaily[, c("Demand", "Temperature")], facets = TRUE)
# Matrix of regressors
#Index elec accordingly to set up the matrix of regressors to include MaxTemp for the maximum temperatures, MaxTempSq which represents the squared value of the maximum temperature, and Workday, in that order.
xreg <- cbind(MaxTemp = elecdaily[, "Temperature"]
,MaxTempSq = elecdaily[,"Temperature"]^2
,WorkDay = elecdaily[,"WorkDay"])
# Fit model
fit <- auto.arima(elec[,"Demand"], xreg = xreg)
# Forecast fit one day ahead
#If the next day is a working day (indicator is 1) with maximum temperature forecast to be 20°C, what is the forecast demand? Fill out the appropriate values in cbind() for the xreg argument in forecast().
forecast(fit, xreg = cbind(20, 20^2, 1))
# Time plots of demand and temperatures
autoplot(elecdaily[, c("Demand", "Temperature")], facets = TRUE)
# Matrix of regressors
#Index elec accordingly to set up the matrix of regressors to include MaxTemp for the maximum temperatures, MaxTempSq which represents the squared value of the maximum temperature, and Workday, in that order.
xreg <- cbind(MaxTemp = elecdaily[, "Temperature"]
,MaxTempSq = elecdaily[,"Temperature"]^2
,WorkDay = elecdaily[,"WorkDay"])
# Fit model
fit <- auto.arima(elec[,"Demand"], xreg = xreg)
# Forecast fit one day ahead
#If the next day is a working day (indicator is 1) with maximum temperature forecast to be 20°C, what is the forecast demand? Fill out the appropriate values in cbind() for the xreg argument in forecast().
forecast(fit, xreg = cbind(20, 20^2, 1))
![](`here("images","tbats_chp5.jpeg")`)
install.packages(c("forecast", "fpp2", "here"))
