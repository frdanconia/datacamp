library(tidyverse)
# read the nodes file into the variable nodes
nodes <- read_csv("nodes.csv")
# read the ties file into the variable ties
ties <- read_csv("ties.csv")
# read the nodes file into the variable nodes
nodes <- read_csv("nodes.csv")
# read the nodes file into the variable nodes
nodes <- read_csv("nodes.csv")
# read the nodes file into the variable nodes
nodes <- read_csv("nodes.csv")
# read the ties file into the variable ties
ties <- read_csv("ties.csv")
# print nodes
nodes
# print ties
ties
# make the network from the data frame ties and print it
g <- graph_from_data_frame(ties, directed = FALSE, vertices = nodes)
install.packages("igraph")
library(igraph)
# read the nodes file into the variable nodes
nodes <- read_csv("nodes.csv")
# read the ties file into the variable ties
ties <- read_csv("ties.csv")
# print nodes
nodes
# print ties
ties
# make the network from the data frame ties and print it
g <- graph_from_data_frame(ties, directed = FALSE, vertices = nodes)
g
# explore the set of nodes
V(g)
# print the number of nodes
vcount(g)
# explore the set of ties
E(g)
# print the number of ties
ecount(g)
# give the name "Madrid network" to the network and print the network `name` attribute
g$name <- "Madrid network"
g$name
# add node attribute id and print the node `id` attribute
V(g)$id <- 1:vcount(g)
V(g)$id
# print the tie `weight` attribute
E(g)$weight
# print the network and spot attributes
g
# add node attribute id and print the node `id` attribute
V(g)$id <- 1:vcount(g)
V(g)$id
# print the tie `weight` attribute
E(g)$weight
# print the network and spot attributes
g
# Visualize the network with the Kamada-Kawai layout
ggraph(g, layout = "with_kk") +
# Add an edge link geometry mapping transparency to weight
geom_edge_link(aes(alpha = weight)) +
# Add a node point geometry
geom_node_point()
install.packages("ggraph")
library(ggraph)
# Visualize the network with the Kamada-Kawai layout
ggraph(g, layout = "with_kk") +
# Add an edge link geometry mapping transparency to weight
geom_edge_link(aes(alpha = weight)) +
# Add a node point geometry
geom_node_point()
# Visualize the network in a circular layout
ggraph(g, layout = "in_circle") +
# Map tie transparency to its weight
geom_edge_link(aes(alpha = weight)) +
geom_node_point()
# compute the degrees of the nodes
dgr <- degree(g)
# add the degrees to the data frame object
nodes <- mutate(nodes, degree = dgr)
# add the degrees to the network object
V(g)$degree <- dgr
# arrange the terrorists in decreasing order of degree
arrange(nodes, -degree)
# compute node strengths
stg <- strength(g)
# add strength to the data frame object
nodes <- mutate(nodes, strength = stg)
# add strength to the network object
V(g)$strength <- stg
# arrange terrorists in decreasing order of strength and then in decreasing order of degree
arrange(nodes, -strength)
arrange(nodes, -degree)
# save the inverse of tie weights as dist_weight
dist_weight <- 1 / E(g)$weight
# compute weighted tie betweenness
btw <- edge_betweenness(g, weights = dist_weight)
# mutate the data frame ties adding a variable betweenness using btw
ties <- mutate(ties, betweenness = btw)
# add the tie attribute betweenness to the network
E(g)$betweenness <- btw
ties_joined <- ties %>%
# Left join to the nodes matching 'from' to 'id'
left_join(nodes, by = c("from" = "id")) %>%
# Left join to nodes again, now matching 'to' to 'id'
left_join(nodes, by = c("to" = "id"))
# See the result
ties_joined
# See the result
ties_joined
# Plot with the Kamada-Kawai layout
ggraph(g, layout = "with_kk") +
# Add an edge link geom, mapping alpha to weight
geom_edge_link(aes(alpha = weight)) +
# Add a node point geom, mapping size to degree
geom_node_point(aes(size = degree))
# Plot with the Kamada-Kawai layout
ggraph(g, layout = "with_kk") +
# Add an edge link geom, mapping alpha to weight
geom_edge_link(aes(alpha = weight)) +
# Add a node point geom, mapping size to degree
geom_node_point(aes(size = degree))
ggraph(g, layout = "with_kk") +
# Add an edge link geom, mapping the edge transparency to betweenness
geom_edge_link(aes(alpha = betweenness))
# find median betweenness
q = median(E(g)$betweenness)
# filter ties with betweenness larger than the median
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(alpha = betweenness, filter = (betweenness > q))) +
geom_node_point() +
theme(legend.position="none")
# find number and percentage of weak ties
ties %>%
group_by(weight) %>%
summarise(number = n(), percentage = n() / nrow(ties)) %>%
arrange(-number)
# check that weakness contains the correct number of weak ties
sum(weakness)
# check that weakness contains the correct number of weak ties
sum(weakness)
# build vector weakness containing TRUE for weak ties
weakness <- E(g)$weight == 1
# check that weakness contains the correct number of weak ties
sum(weakness)
# visualize the network by coloring the weak and strong ties
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(color = weakness)) +
geom_node_point()
# check that weakness contains the correct number of weak ties
sum(weakness)
# visualize the network by coloring the weak and strong ties
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(color = weakness)) +
geom_node_point()
# visualize the network with only weak ties using the filter aesthetic
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(filter = weakness), alpha = 0.5) +
geom_node_point()
# visualize the network with only weak ties using the filter aesthetic
ggraph(g, layout = "with_kk") +
geom_edge_link(aes(filter = weakness), alpha = 0.5) +
geom_node_point()
ties_swapped <- ties %>%
# Swap the variables from and to
mutate(temp = to, to = from, from = temp) %>%
select(-temp)
# get the weighted adjacency matrix
A <- as_adjacency_matrix(g, attr = "weight", sparse = FALSE, names = FALSE)
# print the first row and first column of A
A[1, ]
A[, 1]
# print submatrix of the first 6 rows and columns
A[1:6, 1:6]
# obtain a vector of node strengths
rowSums(A)
# build a Boolean (0/1) matrix from the weighted matrix A
B <- A > 0
# obtain a vector of node degrees using the Boolean matrix
rowSums(B)
# set the diagonal of S to 0
diag(S) = 0
# compute the Pearson correlation on columns of A
S <- cor(A)
# set the diagonal of S to 0
diag(S) = 0
# print a summary of the similarities in matrix S
summary(c(S))
# plot a histogram of similarities in matrix S
hist(c(S), xlab = "Similarity", main = "Histogram of similarity")
# plot a histogram of similarities in matrix S
hist(c(S), xlab = "Similarity", main = "Histogram of similarity")
# Scatter plot of degree and strength with regression line
ggplot(nodes, aes(x = degree, y = strength)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Pearson correlation coefficient
cor(nodes$degree, nodes$strength)
# From previous steps
h <- graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
sim_df <- igraph::as_data_frame(h, what = "edges")
# Convert sim_df to a tibble
sim_tib <- as_tibble(sim_df)
# See the results
sim_tib
# See the results
sim_tib
# left join similarity and nodes data frames and then select and rename relevant variables
sim2 <- sim %>%
left_join(nodes, c("from" = "id")) %>%
left_join(nodes, c("to" = "id")) %>%
select(from, to, name_from = name.x, name_to = name.y, similarity = weight,
degree_from = degree.x, degree_to = degree.y, strength_from = strength.x, strength_to = strength.y)
# Convert sim_df to a tibble
sim_tib <- as_tibble(sim_df)
# See the results
sim_tib
# left join similarity and nodes data frames and then select and rename relevant variables
sim2 <- sim %>%
left_join(nodes, c("from" = "id")) %>%
left_join(nodes, c("to" = "id")) %>%
select(from, to, name_from = name.x, name_to = name.y, similarity = weight,
degree_from = degree.x, degree_to = degree.y, strength_from = strength.x, strength_to = strength.y)
# left join similarity and nodes data frames and then select and rename relevant variables
sim2 <- sim_tib %>%
left_join(nodes, c("from" = "id")) %>%
left_join(nodes, c("to" = "id")) %>%
select(from, to, name_from = name.x, name_to = name.y, similarity = weight,
degree_from = degree.x, degree_to = degree.y, strength_from = strength.x, strength_to = strength.y)
# print sim2
sim2
# print sim2
sim2
sim_joined %>%
# Arrange by descending similarity
arrange(desc(similarity))
sim2 %>%
# Arrange by descending similarity
arrange(desc(similarity))
# filter the similarity data frame to similarities larger than or equal to 0.60
sim3 <- filter(sim2, similarity >= 0.60)
# build a similarity network called h2 from the filtered similarity data frame
h2 <- graph_from_data_frame(sim3, directed = FALSE)
# visualize the similarity network h2
ggraph(h2, layout = "with_kk") +
geom_edge_link(aes(alpha = similarity)) +
geom_node_point()
sim2 %>%
# Arrange by descending similarity
arrange(desc(similarity))
# filter the similarity data frame to similarities larger than or equal to 0.60
sim3 <- filter(sim2, similarity >= 0.60)
# build a similarity network called h2 from the filtered similarity data frame
h2 <- graph_from_data_frame(sim3, directed = FALSE)
# visualize the similarity network h2
ggraph(h2, layout = "with_kk") +
geom_edge_link(aes(alpha = similarity)) +
geom_node_point()
# compute a distance matrix
D <- 1-S
# obtain a distance object
d <- as.dist(D)
# run average-linkage clustering method and plot the dendrogram
cc <- hclust(d, method = "average")
plot(cc)
# find the similarity of the first pair of nodes that have been merged
S[40, 45]
# cut the dendrogram at 4 clusters
cls <- cutree(cc, k = 4)
# add cluster information to the nodes data frame
nodes <- mutate(nodes, cluster = cls)
# print the nodes data frame
nodes
# select the names of terrorists in the first cluster
filter(nodes, cluster == 1) %>%
select(name)
# for each cluster select cluster size, average node degree, and average node strength
group_by(nodes, cluster) %>%
summarise(size = n(),
avg_degree = mean(degree),
avg_strength = mean(strength)) %>%
arrange(-size)
# Add cluster information to the network's nodes
V(g)$cluster <- nodes$cluster
# Convert from igraph to visNetwork
data <- toVisNetworkData(g)
install.packages("visNetwork")
library(visNetwork)
# Convert from igraph to visNetwork
data <- toVisNetworkData(g)
# Add to the plot
visNetwork(nodes = data$nodes, edges = data$edges, width = 300, height = 300) %>%
# Set the layout to Kamada-Kawai
visIgraphLayout(layout = "layout_with_kk")
# highlight nearest nodes and ties of the selected node
visNetwork(nodes = data$nodes, edges = data$edges, width = 300, height = 300) %>%
visIgraphLayout(layout = "layout_with_kk") %>%
visOptions(highlightNearest = TRUE)
# Add cluster information to the network's nodes
V(g)$cluster <- nodes$cluster
# Update the plot
visNetwork(nodes = data$nodes, edges = data$edges, width = 300, height = 300) %>%
visIgraphLayout(layout = "layout_with_kk") %>%
# Change the options to allow selection of nodes by ID
visOptions(nodesIdSelection = TRUE)
library(visNetwork)
# Convert from igraph to visNetwork
data <- toVisNetworkData(g)
# Add to the plot
visNetwork(nodes = data$nodes, edges = data$edges, width = 300, height = 300) %>%
# Set the layout to Kamada-Kawai
visIgraphLayout(layout = "layout_with_kk")
# highlight nearest nodes and ties of the selected node
visNetwork(nodes = data$nodes, edges = data$edges, width = 300, height = 300) %>%
visIgraphLayout(layout = "layout_with_kk") %>%
visOptions(highlightNearest = TRUE)
